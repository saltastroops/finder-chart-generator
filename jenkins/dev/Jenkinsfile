@Library('saao-shared-library@move-to-ruff')

def config = [:]
def success = true

pipeline {
  agent any

  stages {
    stage("Read configuration data") {
      steps {
        script {
          configFileProvider([
            configFile(
              fileId: 'finder-chart-generator-dev',
              variable: 'FCG_CONFIG'
            )
          ]) {
             config = readJSON file: "$FCG_CONFIG"

             // Check that all configuration properties are given
             requiredConfigProperties = [
               'host',
               'hostCredentialsId',
               'emailRecipients',
               'registryCredentialsId',
               'registryUrl'
             ]
             for (property in requiredConfigProperties) {
               if (!config.containsKey(property)) {
                 error("The $property property is missing in the configuration file.")
               }
             }
          }
        }
      }
    }

    stage("Run tests") {
      agent {
        dockerfile {
          filename 'Dockerfile'
          dir 'jenkins/agent'
          args '-v finder-chart-generator-venv:/venv -u 0:0'
        }
      }
      steps {
        sh 'echo $PATH'
        sh 'poetry export -f requirements.txt --with dev --output requirements.txt'
        sh 'python -m pip install -r requirements.txt'
        script {
          success = saao.runPythonTests(
            "black": ["fcg", "tests"],
            "flake8": ["fcg", "tests"],
            "isort": ["fcg", "tests"],
            "mypy": ["fcg", "tests"],
            "pytest": ["tests"]
          )
        }
      }
    }

    stage("Generate test reports") {
      steps {
        script {
          saao.generatePythonTestReports()
        }
      }
    }

    stage ("Deploy") {
      when { expression { success }}
      steps {
        script {
          saao.deployContainer(
            dockerFile: 'jenkins/Dockerfile',
            dockerComposeFile: 'jenkins/docker-compose.yml',
            host: config.host,
            hostCredentialsId: config.hostCredentialsId,
            imageName: 'finder-chart-generator',
            registryCredentialsId: config.registryCredentialsId,
            registryUrl: config.registryUrl
          )
        }
      }
    }
  }

  post {
    always {
      emailext(
        body: '''$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

Check console output at $BUILD_URL to view the results.''',
        subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!',
        to: config.emailRecipients
      )
    }
  }
}
